# Generated by Django 3.2.3 on 2021-05-26 14:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import iguana.base.models.pessoa_fisica
import iguana.base.models.telefone
import localflavor.br.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Pais",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sigla", models.CharField(max_length=4, verbose_name="Sigla")),
                ("nome", models.CharField(max_length=155, verbose_name="Nome")),
            ],
        ),
        migrations.CreateModel(
            name="PessoaJuridica",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="base.user",
                    ),
                ),
                ("cnpj", localflavor.br.models.BRCNPJField(max_length=18, unique=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("base.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Naturalidade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cidade_estado",
                    models.CharField(max_length=150, verbose_name="Cidade/Estado"),
                ),
                ("nato", models.BooleanField(default=True, verbose_name="Nato")),
                (
                    "pais",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="base.pais",
                        verbose_name="País",
                    ),
                ),
                (
                    "pais_origem",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="pais_origem",
                        to="base.pais",
                        verbose_name="País origem",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Endereco",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "tipo",
                    models.IntegerField(
                        choices=[(1, "Comercial"), (2, "Residencial"), (3, "Rural")]
                    ),
                ),
                ("cep", localflavor.br.models.BRPostalCodeField(max_length=9)),
                ("logradouro", models.CharField(max_length=255)),
                ("bairro", models.CharField(max_length=120)),
                ("numero", models.CharField(max_length=120)),
                ("cidade", models.CharField(max_length=120)),
                ("uf", localflavor.br.models.BRStateField(max_length=2)),
                (
                    "complemento",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("principal", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="base_endereco_related",
                        related_query_name="base_enderecos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Telefone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "numero",
                    models.CharField(
                        max_length=120,
                        validators=[
                            iguana.base.models.telefone.TelefoneRegexValidator()
                        ],
                    ),
                ),
                ("observacoes", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="base_telefone_related",
                        related_query_name="base_telefones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "numero")},
            },
        ),
        migrations.CreateModel(
            name="PessoaFisica",
            fields=[
                (
                    "user_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="base.user",
                    ),
                ),
                ("cpf", localflavor.br.models.BRCPFField(max_length=14, unique=True)),
                (
                    "sexo",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Masculino"),
                            ("F", "Feminino"),
                            ("I", "Indefinido"),
                            ("N", "Não Informado"),
                        ],
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "estado_civil",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "Solteiro"),
                            (1, "Casado"),
                            (2, "Viúvo"),
                            (3, "Divorciado"),
                            (4, "União estável"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "tipo_sanguineo",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A+", "A Positivo"),
                            ("A-", "A Negativo"),
                            ("B+", "B Positivo"),
                            ("B-", "B Negativo"),
                            ("AB+", "Ab Positivo"),
                            ("AB-", "Ab Negativo"),
                            ("O+", "O Positivo"),
                            ("O-", "O Negativo"),
                        ],
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "raca",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Branco"),
                            (2, "Preto, Negro ou Afrodescendente"),
                            (3, "Pardo, Mulato ou Mestiço"),
                            (4, "Amarelo ou Indiano/Asiático"),
                            (5, "Indígena"),
                        ],
                        null=True,
                        verbose_name="Raça",
                    ),
                ),
                ("falecido", models.BooleanField(default=False)),
                (
                    "naturalidade",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.naturalidade",
                        verbose_name="Naturalidade",
                    ),
                ),
            ],
            options={
                "ordering": ["-pk"],
            },
            bases=("base.user",),
            managers=[
                ("objects", iguana.base.models.pessoa_fisica.PessoaFisicaManager()),
            ],
        ),
        migrations.CreateModel(
            name="DocumentoIdentificacao",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("RG", "RG"),
                            ("CTPS", "Cateira de Trabalho - CTPS"),
                            ("CNH", "Carteira Nacional de Habilitação - CNH"),
                            ("TITULO_ELEITOR", "Título de Eleitor"),
                            ("PASSAPORTE", "Passaporte"),
                            ("RESERV", "Certificado de Reservista"),
                            ("CERT_NASC", "Certidão de Nascimento"),
                        ],
                        max_length=50,
                        verbose_name="Tipo",
                    ),
                ),
                (
                    "pessoa_fisica",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.pessoafisica",
                        verbose_name="Pessoa Física",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="documentoidentificacao",
            constraint=models.UniqueConstraint(
                fields=("pessoa_fisica_id", "tipo"), name="unique_pessoa_fisica_id_tipo"
            ),
        ),
    ]
